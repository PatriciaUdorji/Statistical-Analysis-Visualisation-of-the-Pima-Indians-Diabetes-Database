
diabetes<- read.csv("C:/Users/USER/OneDrive - Nottingham Trent University/R programming/StatsData/diabetes.csv",head = TRUE)

attach(diabetes)

B. Replacing the missing entries and dropping off pregnancies variable

##This drops off the pregnancies variable
diabetes<-diabetes[, -1]

##This changes the missing values in each variables to NAN
Glucose[Glucose==0]=NaN
BloodPressure[BloodPressure==0]=NaN
SkinThickness[SkinThickness==0]=NaN
Insulin[Insulin==0]=NaN
BMI[BMI==0]=NaN
DiabetesPedigreeFunction[DiabetesPedigreeFunction==0]=NaN
Age[Age==0]=NaN

C. Summary Statistics and visualization of the sample from the women of Pima

##Installing ggplot2 library 
install.packages("ggplot2")
library(ggplot2)

##Installing dplyr library 
install.packages("dplyr")
library(dplyr)

##Installing summarytools library 
install.packages("summarytools")
library(summarytools)

##Displays the summary statistics of the data
summary(diabetes)
descr(diabetes)

##Visualises the variables with a histogram
par(mfrow=c(1,3))
hist(Glucose, border="black", prob = TRUE, xlab = "Glucose",main = "Histogram Plot of Glucose")
hist(BloodPressure, border="black", prob = TRUE, xlab = "BloodPressure",main = "Histogram Plot of Blood Pressure")
hist(SkinThickness, border="black", prob = TRUE, xlab = "SkinThickness",main = "Histogram Plot of SkinThickness")
hist(Insulin, border="black", prob = TRUE, xlab = "Insulin",main = "Histogram Plot of Insulin")
hist(BMI, border="black", prob = TRUE, xlab = "BMI",main = "Histogram Plot of BMI")
hist(DiabetesPedigreeFunction, border="black", prob = TRUE, xlab = "DiabetesPedigreeFunction",main = "Histogram Plot of DiabetesPedigreeFunction")
hist(Age, border="black", prob = TRUE, xlab = "Age",main = "Histogram Plot of Age")


##Visualises each variable with a Box Plot 
par(mfrow=c(1,3))
boxplot(Glucose, main="Glucose")
boxplot(BloodPressure, main="BloodPressure")
boxplot(SkinThickness, main="SkinThickness")
boxplot(Insulin, main="Insulin")
boxplot(BMI, main="BMI")
boxplot(DiabetesPedigreeFunction, main="DiabetesPedigreeFunction")
boxplot(Age, main="Age")

##Visualises all variables with a Box Plot
par(mfrow=c(1,1))
boxplot(Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age, data = diabetes, col = "Black", main = "Boxplot of Clinical Variables for Diabetes")


##Visualises the variables with a density plot
plot(density(Glucose, na.rm = TRUE), main = "Density Plot of Glucose", lwd = 2,col = "chocolate")
plot(density(BloodPressure, na.rm = TRUE), main = "Density Plot of BloodPressure", lwd = 2,col = "chocolate")
plot(density(SkinThickness, na.rm = TRUE), main = "Density Plot of SkinThickness", lwd = 2,col = "chocolate")
plot(density(Insulin, na.rm = TRUE), main = "Density Plot of Insulin", lwd = 2,col = "chocolate")
plot(density(BMI, na.rm = TRUE), main = "Density Plot of BMI", lwd = 2,col = "chocolate")
plot(density(DiabetesPedigreeFunction, na.rm = TRUE), main = "Density Plot of DiabetesPedigreeFunction", lwd = 2,col = "chocolate")
plot(density(Age, na.rm = TRUE), main = "Density Plot of Age", lwd = 2,col = "chocolate")

D. Test of significant differences in central tendencies

## Create a new dataset for persons with diabetes 
DiabetesYes=subset(diabetes, Outcome==1)

## To display DiabetesYes
DiabetesYes

## Create a new dataset for persons without diabetes 
DiabetesNo=subset(diabetes, Outcome==0)

## To display DiabetesNo 
DiabetesNo

## Computes the variance of each variable as regards the outcome of diabetes
var(DiabetesNo$BloodPressure, na.rm = TRUE)
var(DiabetesYes$BloodPressure, na.rm = TRUE)

var(DiabetesYes$SkinThickness, na.rm = TRUE)
var(DiabetesNo$SkinThickness, na.rm = TRUE)

var(DiabetesNo$Insulin, na.rm = TRUE)
var(DiabetesYes$Insulin, na.rm = TRUE)

var(DiabetesNo$BMI, na.rm = TRUE)
var(DiabetesYes$BMI, na.rm = TRUE)

var(DiabetesNo$DiabetesPedigreeFunction)
var(DiabetesYes$DiabetesPedigreeFunction)

var(DiabetesNo$Age)
var(DiabetesYes$Age)

##Test for normality using Kolmogorov-Smirnov test for variables with diabetes 
Glucose_ks.test<- ks.test(DiabetesYes$Glucose,"pnorm", mean = mean(DiabetesYes$Glucose, na.rm = TRUE), sd = sd(DiabetesYes$Glucose, na.rm = TRUE))
BloodPressure_ks.test <- ks.test(DiabetesYes$BloodPressure,"pnorm", mean = mean(DiabetesYes$BloodPressure, na.rm = TRUE), sd = sd(DiabetesYes$BloodPressure, na.rm = TRUE))
SkinThickness_ks.test<-ks.test(DiabetesYes$SkinThickness,"pnorm", mean = mean(DiabetesYes$SkinThickness, na.rm = TRUE), sd = sd(DiabetesYes$SkinThickness, na.rm = TRUE))
Insulin_ks.test<-ks.test(DiabetesYes$Insulin,"pnorm", mean = mean(DiabetesYes$Insulin, na.rm = TRUE), sd = sd(DiabetesYes$Insulin, na.rm = TRUE))
BMI_ks.test<-ks.test(DiabetesYes$BMI,"pnorm", mean = mean(DiabetesYes$BMI, na.rm = TRUE), sd = sd(DiabetesYes$BMI, na.rm = TRUE))
DiabetesPedigreeFunction_ks.test<-ks.test(DiabetesYes$DiabetesPedigreeFunction,"pnorm", mean = mean(DiabetesYes$DiabetesPedigreeFunction, na.rm = TRUE), sd = sd(DiabetesYes$DiabetesPedigreeFunction, na.rm = TRUE))
Age_ks.test<-ks.test(DiabetesYes$Age,"pnorm", mean = mean(DiabetesYes$Age, na.rm = TRUE), sd = sd(DiabetesYes$Age, na.rm = TRUE))

##Create a table of p-values
normalitytest_pvalues <- data.frame(variable = c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI","DiabetesPedigreeFunction", "Age" ),
                                     p_value = c(Glucose_ks.test$p.value, BloodPressure_ks.test$p.value, SkinThickness_ks.test$p.value, Insulin_ks.test$p.value, BMI_ks.test$p.value, DiabetesPedigreeFunction_ks.test$p.value, Age_ks.test$p.value))
##Display the table of p-values
normalitytest_pvalues

##Test for normality using Kolmogorov-Smirnov test for variables without diabetes 
Glucose_ks.test<-ks.test(DiabetesNo$Glucose,"pnorm", mean = mean(DiabetesNo$Glucose, na.rm = TRUE), sd = sd(DiabetesNo$Glucose, na.rm = TRUE))
BloodPressure_ks.test<-ks.test(DiabetesNo$BloodPressure,"pnorm", mean = mean(DiabetesNo$BloodPressure, na.rm = TRUE), sd = sd(DiabetesNo$BloodPressure, na.rm = TRUE))
SkinThickness_ks.test<-ks.test(DiabetesNo$SkinThickness,"pnorm", mean = mean(DiabetesNo$SkinThickness, na.rm = TRUE), sd = sd(DiabetesNo$SkinThickness, na.rm = TRUE))
Insulin_ks.test<-ks.test(DiabetesNo$Insulin,"pnorm", mean = mean(DiabetesNo$Insulin, na.rm = TRUE), sd = sd(DiabetesNo$Insulin, na.rm = TRUE))
BMI_ks.test<-ks.test(DiabetesNo$BMI,"pnorm", mean = mean(DiabetesNo$BMI, na.rm = TRUE), sd = sd(DiabetesNo$BMI, na.rm = TRUE))
DiabetesPedigreeFunction_ks.test<-ks.test(DiabetesNo$DiabetesPedigreeFunction,"pnorm", mean = mean(DiabetesNo$DiabetesPedigreeFunction, na.rm = TRUE), sd = sd(DiabetesNo$DiabetesPedigreeFunction, na.rm = TRUE))
Age_ks.test<-ks.test(DiabetesNo$Age,"pnorm", mean = mean(DiabetesNo$Age, na.rm = TRUE), sd = sd(DiabetesNo$Age, na.rm = TRUE))

##Create a table of p-values
normalitytest_pvalues <- data.frame(variable = c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI","DiabetesPedigreeFunction", "Age" ),
                                    p_value = c(Glucose_ks.test$p.value, BloodPressure_ks.test$p.value, SkinThickness_ks.test$p.value, Insulin_ks.test$p.value, BMI_ks.test$p.value, DiabetesPedigreeFunction_ks.test$p.value, Age_ks.test$p.value))
##Display the table of p-values
normalitytest_pvalues

##Perform t-test for normally distributed variables
SkinThickness_test <- t.test(DiabetesYes$SkinThickness, DiabetesNo$SkinThickness)
BloodPressure_test <- t.test(DiabetesYes$BloodPressure, DiabetesNo$BloodPressure)

##Create a table of p-values
parametrictest_pvalues <- data.frame(variable = c("SkinThickness", "BloodPressure"),
                       p_value = c(SkinThickness_test$p.value, BloodPressure_test$p.value))

##Display the table of p-values
parametrictest_pvalues

##Perform Mann-Whitney test test for not normally distributed pairs
BMI_wilcox_test <- wilcox.test(DiabetesYes$BMI, DiabetesNo$BMI)
Glucose_wilcox_test <- wilcox.test(DiabetesYes$Glucose, DiabetesNo$Glucose)
Insulin_wilcox_test <- wilcox.test(DiabetesYes$Insulin, DiabetesNo$Insulin)
DiabetesPedigreeFunction_wilcox_test <- wilcox.test(DiabetesYes$DiabetesPedigreeFunction, DiabetesNo$DiabetesPedigreeFunction)
Age_wilcox_test <- wilcox.test(DiabetesYes$Age, DiabetesNo$Age)

##Create a table of p-values
nonparametric_test_pvalues <- data.frame(variable = c("BMI", "Glucose", "Insulin", "DiabetesPedigreeFunction","Age"),
                                     p_value = c(BMI_wilcox_test$p.value, Glucose_wilcox_test$p.value, Insulin_wilcox_test$p.value, DiabetesPedigreeFunction_wilcox_test$p.value,Age_wilcox_test$p.value))

##Display the table of p-values
nonparametric_test_pvalues

E. Test of Independence using correlation 

##Test for normality using Kolmogorov-Smirnov test
Glucose_test<-ks.test(Glucose,"pnorm", mean = mean(Glucose, na.rm = TRUE), sd = sd(Glucose, na.rm = TRUE))
BloodPressure_test<-ks.test(BloodPressure,"pnorm", mean = mean(BloodPressure, na.rm = TRUE), sd = sd(BloodPressure, na.rm = TRUE))
SkinThickness_test<-ks.test(SkinThickness,"pnorm", mean = mean(SkinThickness, na.rm = TRUE), sd = sd(SkinThickness, na.rm = TRUE))
BMI_test<-ks.test(BMI,"pnorm", mean = mean(BMI, na.rm = TRUE), sd = sd(BMI, na.rm = TRUE))
Insulin_test<-ks.test(Insulin,"pnorm", mean = mean(Insulin, na.rm = TRUE), sd = sd(Insulin, na.rm = TRUE))
Age_test<-ks.test(Age,"pnorm", mean = mean(Age), sd = sd(Age))
DiabetesPedigreeFunction_test<-ks.test(DiabetesPedigreeFunction,"pnorm", mean = mean(DiabetesPedigreeFunction), sd = sd(DiabetesPedigreeFunction))

##Create a table of p-values
normalitytest_pvalues <- data.frame(variable = c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI","DiabetesPedigreeFunction", "Age" ),
                                    p_value = c(Glucose_test$p.value, BloodPressure_test$p.value, SkinThickness_test$p.value, Insulin_test$p.value, BMI_test$p.value, DiabetesPedigreeFunction_test$p.value, Age_test$p.value))
##Display the table of p-values
normalitytest_pvalues

## Create a new dataset with only the normally distributed variables
normal_variables=diabetes[, c("SkinThickness", "BloodPressure", "BMI")]

## Create a new dataset with only the not normally distributed variable
not_normal_variables=diabetes[, c("Glucose", "Insulin", "DiabetesPedigreeFunction", "Age")]

##  Calculate correlation matrix using the pearson method
normalcor_matrix <- cor(normal_variables, use = "pairwise.complete.obs")
normalcor_matrix

## Calculate correlation matrix using the Spearman method
notnormalcor_matrix <- cor(not_normal_variables, method = "spearman", use = "pairwise.complete.obs")
notnormalcor_matrix 


## Pearson correlation coefficient and test
cor.test(BloodPressure, SkinThickness)
cor.test(BloodPressure, BMI)
cor.test(SkinThickness, BMI)


## Spearman correlation coefficient and test
cor.test(Glucose, BloodPressure, method = "spearman")
cor.test(Glucose, SkinThickness, method = "spearman")
cor.test(Glucose, Insulin, method = "spearman")
cor.test(Glucose, BMI, method = "spearman")
cor.test(Glucose, DiabetesPedigreeFunction, method = "spearman")
cor.test(Glucose, Age, method = "spearman")
cor.test(BloodPressure, Insulin, method = "spearman")
cor.test(BloodPressure, DiabetesPedigreeFunction, method = "spearman")
cor.test(BloodPressure, Age, method = "spearman")
cor.test(SkinThickness, Insulin, method = "spearman")
cor.test(SkinThickness, DiabetesPedigreeFunction, method = "spearman")
cor.test(SkinThickness, Age, method = "spearman")
cor.test(Insulin, BMI, method = "spearman")
cor.test(Insulin, DiabetesPedigreeFunction, method = "spearman")
cor.test(Insulin, Age, method = "spearman")
cor.test(BMI, DiabetesPedigreeFunction, method = "spearman")
cor.test(BMI, Age, method = "spearman")
cor.test(DiabetesPedigreeFunction, Age, method = "spearman")



##Scatter Plot for all variables
scatterplot<-pairs(diabetes[,1:7])


##Scatter Plot for each variables
ggplot(diabetes, aes(x = Glucose, y = BloodPressure)) +geom_point() +labs(x = "Glucose", y = "BloodPressure", title = "Scatterplot of Glucose vs. BloodPressure")

ggplot(diabetes, aes(x = Glucose, y = SkinThickness)) +geom_point() +labs(x = "Glucose", y = "SkinThickness", title = "Scatterplot of Glucose vs. SkinThickness")

ggplot(diabetes, aes(x = Glucose, y = Insulin)) +geom_point() +labs(x = "Glucose", y = "Insulin", title = "Scatterplot of Glucose vs. Insulin")

ggplot(diabetes, aes(x = Glucose, y = BMI)) +geom_point() +labs(x = "Glucose", y = "BMI", title = "Scatterplot of Glucose vs. BMI")

ggplot(diabetes, aes(x = Glucose, y = DiabetesPedigreeFunction)) +geom_point() +labs(x = "Glucose", y = "DiabetesPedigreeFunction", title = "Scatterplot of Glucose vs. DiabetesPedigreeFunction")

ggplot(diabetes, aes(x = Glucose, y = Age)) +geom_point() +labs(x = "Glucose", y = "Age", title = "Scatterplot of Glucose vs. Age")

ggplot(diabetes, aes(x = BloodPressure, y = SkinThickness)) +geom_point() +labs(x = "BloodPressure", y = "SkinThickness", title = "Scatterplot of BloodPressure vs. SkinThickness")

ggplot(diabetes, aes(x = BloodPressure, y = Insulin)) +geom_point() +labs(x = "BloodPressure", y = "Insulin", title = "Scatterplot of BloodPressure vs. Insulin")

ggplot(diabetes, aes(x = BloodPressure, y = BMI)) +geom_point() +labs(x = "BloodPressure", y = "BMI", title = "Scatterplot of BloodPressure vs. BMI")

ggplot(diabetes, aes(x = BloodPressure, y = DiabetesPedigreeFunction)) +geom_point() +labs(x = "BloodPressure", y = "DiabetesPedigreeFunction", title = "Scatterplot of BloodPressure vs. DiabetesPedigreeFunction")

ggplot(diabetes, aes(x = BloodPressure, y = Age)) +geom_point() +labs(x = "BloodPressure", y = "Age", title = "Scatterplot of BloodPressure vs. Age")

ggplot(diabetes, aes(x = SkinThickness, y = Insulin)) +geom_point() +labs(x = "SkinThickness", y = "Insulin", title = "Scatterplot of SkinThickness vs. Insulin")

ggplot(diabetes, aes(x = SkinThickness, y = BMI)) +geom_point() +labs(x = "SkinThickness", y = "BMI", title = "Scatterplot of SkinThickness vs. BMI")

ggplot(diabetes, aes(x = SkinThickness, y = DiabetesPedigreeFunction)) +geom_point() +labs(x = "SkinThickness", y = "DiabetesPedigreeFunction", title = "Scatterplot of SkinThickness vs. DiabetesPedigreeFunction")

ggplot(diabetes, aes(x = SkinThickness, y = Age)) +geom_point() +labs(x = "SkinThickness", y = "Age", title = "Scatterplot of SkinThickness vs. Age")

ggplot(diabetes, aes(x = Insulin, y = BMI)) +geom_point() +labs(x = "Insulin", y = "BMI", title = "Scatterplot of Insulin vs. BMI")

ggplot(diabetes, aes(x = Insulin, y = DiabetesPedigreeFunction)) +geom_point() +labs(x = "Insulin", y = "DiabetesPedigreeFunction", title = "Scatterplot of Insulin vs. DiabetesPedigreeFunction")

ggplot(diabetes, aes(x = Insulin, y = Age)) +geom_point() +labs(x = "Insulin", y = "Age", title = "Scatterplot of Insulin vs. Age")

ggplot(diabetes, aes(x = BMI, y = DiabetesPedigreeFunction)) +geom_point() +labs(x = "BMI", y = "DiabetesPedigreeFunction", title = "Scatterplot of BMI vs. DiabetesPedigreeFunction")

ggplot(diabetes, aes(x = BMI, y = Age)) +geom_point() +labs(x = "BMI", y = "Age", title = "Scatterplot of BMI vs. Age")

ggplot(diabetes, aes(x = DiabetesPedigreeFunction, y = Age)) +geom_point() +labs(x = "DiabetesPedigreeFunction", y = "Age", title = "Scatterplot of DiabetesPedigreeFunction vs. Age")

## Create heatmap
heatmap(normalcor_matrix, Rowv = NA, Colv = NA, col = colorRampPalette(c("lightblue", "Blue", "skyblue"))(100))

## Create heatmap
heatmap(notnormalcor_matrix, Rowv = NA, Colv = NA, col = colorRampPalette(c("lightblue", "Blue", "skyblue"))(100))


F. Modelling diabetes outcome with the clinical variables 


##(Model 1)Fit a logistic regression model to the "diabetes" dataset
model <- glm(Outcome ~ Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = diabetes, family = "binomial")
## Summary of the logistic regression model
summary(model)

##Calculate the VIF for each predictor variable
vif(model)

##(Model 2)Fit a logistic regression model to the "diabetes" dataset
model <- glm(Outcome ~ Glucose + BloodPressure+ BMI + DiabetesPedigreeFunction + Age, data = diabetes, family = "binomial")
## Summary of the logistic regression model
summary(model)



G. Prediction of Glucose assuming it depends on Age.

detach(diabetes)

diabetes<- read.csv("C:/Users/USER/OneDrive - Nottingham Trent University/R programming/StatsData/diabetes.csv",head = TRUE)
attach(diabetes)

##Select the columns for Age and Glucose
prediction_data <- diabetes[Glucose != 0, c("Age", "Glucose")]

##Train the linear regression model
model2 <- lm(Glucose ~ Age, data = prediction_data)

##Summary of the linear regression model
summary(model2)

##Create a new dataset with missing Glucose values
missing_data <- diabetes[Glucose == 0, c("Age", "Glucose")]

##Use the trained model to predict the missing Glucose values
missing_data$Glucose <- predict(model2, newdata = missing_data)

##To view the predicted values
View(missing_data$Glucose)
 

